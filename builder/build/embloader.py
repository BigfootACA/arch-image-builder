import os
import json
import yaml
from logging import getLogger
from builder.lib.boot import find_efi_folder, boot_entry_prepare, boot_install_efi
from builder.lib.context import ArchBuilderContext
from builder.lib.utils import path_to_name
log = getLogger(__name__)


def gen_entry(ctx: ArchBuilderContext, cfg: dict) -> dict:
	"""
	Generate a entry config for embloader
	"""
	config = {}
	entry = boot_entry_prepare(ctx, cfg)

	config["title"] = entry["name"]
	config["type"] = "linux-efi"

	# add kernel path field
	config["kernel"] = entry["kernel"]

	# add device tree blob field
	if entry["devicetree"]:
		config["devicetree"] = entry["devicetree"]

	# add initramfs field
	if entry["initramfs"]:
		config["initramfs"] = entry["initramfs"]

	# add device tree blob overlay field
	if entry["dtoverlay"]:
		config["overlays"] = [{"path": path} for path in entry["dtoverlay"]]

	# add kernel command line
	if entry["cmdline"]:
		config["bootargs"] = entry["cmdline"]

	return config


def gen_configs(ctx: ArchBuilderContext, folder: str):
	config = ctx.get("embloader", {})
	embloader = os.path.join(folder, "embloader")
	os.makedirs(embloader, exist_ok=True)
	default: str = None
	for item in ctx.get("bootloader.items", []):
		name = item.get("name", "Linux")
		id = item.get("id", path_to_name(name))
		if item.get("default", False):
			default = id
		if config.get("loaders", {}).get(id, None) is not None:
			log.warning(f"skip embloader exists entry {id}")
			continue
		config["loaders"][id] = gen_entry(ctx, item)
		log.debug(f"create embloader entry {id}")
	
	if "menu" not in config:
		config["menu"] = {}

	if default is not None:
		if config["menu"].get("default", None) is None:
			config["menu"]["default"] = default
		else:
			log.warning(f"skip embloader exists default entry: {config["menu"]["default"]}")

	if ctx.get("bootloader.timeout", None) is not None:
		if config["menu"].get("timeout", None) is None:
			config["menu"]["timeout"] = ctx.get("bootloader.timeout", 5)
		else:
			log.warning(f"skip embloader exists timeout entry: {config["menu"]["timeout"]}")

	jstr = json.dumps(config, indent=2)
	log.debug(f"create embloader config:\n{jstr}")

	with open(os.path.join(embloader, "config.static.yaml"), "w") as f:
		f.write("# This file is auto generated by arch-image-builder\n\n")
		yaml.dump(config, f)


def proc_embloader(ctx: ArchBuilderContext):
	"""
	Install embloader bootloader entries
	"""
	root = ctx.get_rootfs()
	if "embloader" not in ctx.get("bootloader.method", []):
		return

	esp_dest = find_efi_folder(ctx)

	# esp install target folder in rootfs (WORKSPACE/TARGET/rootfs/boot/efi)
	efi_folder = os.path.join(root, esp_dest)

	boot_install_efi(ctx, "usr/share/embloader", "efi/embloader", "embloader.efi")
	gen_configs(ctx, efi_folder)
